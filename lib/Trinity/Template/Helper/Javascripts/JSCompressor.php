<?php
namespace Trinity\Template\Helper\Javascripts;
use Trinity\Template\Helper\Javascripts\JavaScriptPacker;
/**
 * Kompresja kodu JavaScript
 * Łączy wiele plików ze skryptami, robi czystki i kompresję kodu
 * 
 * @authors		Kamil Brenk <kontakt@kamilbrenk.pl>
 * @license		GPL
 * @link		http://blog.kamilbrenk.pl/js-minify/
 * @version		1.0
**/
class JSCompressor
{
	private
		/**
		 * Default configuration.
		**/
		$_config = array(
			'charset' => 'utf-8',
			'compress_code' => true,
			'gzip_contents' => false,
			'gzip_level' => 6,
			'cache_enabled' => true,
			'cache_directory' => 'tmp/',
			'use_cache_browser' => true,
			'time_cache_browser' => 3600
		),
		$_jsCode,
		$_filesRequire = array(),
		$_filesLoaded = array(),
		$_filename = null;

	/**
	 * Constructs and initializes with provided array.
	 *
	 * @param array $config	optional Options.
	**/
	public function __construct($config=array())
	{
		foreach($config as $name => $type)
		{
			if(in_array($name, $this->_config))
			{
				$this->_config[$name] = $config[$name];
			}
		}
	} // end __construct();

	/**
	 * Add files.
	 *
	 * @param array $files Files array.
	**/
	public function addFiles($files)
	{
		foreach($files as $id => $file)
		{
			$this->addFile(trim($file));
		}
	} // end addFiles();

	/**
	 * Add JS file.
	 *
	 * @param string $file JS file address.
	**/
	public function addFile($file)
	{
		array_push($this->_filesRequire, $file);
	} // end addFile();

	/**
	 * Compress code.
	 *
	 * @param string $code JS code to compress.
	 * @return Compressed code.
	**/
	public function compressCode($code)
	{
		$packer = new JavaScriptPacker($code, 0, true, true);
		return $packer->pack();
	} // end compressCode();

	/**
	 * Gets and minifies JS code.
	 *
	 * @param array $files Files do minify.
	 * @return string Minified code.
	**/
	private function _getCode($files)
	{
		$fullCode = null;
		foreach($files as $id => $file)
		{
			if(!in_array($file, $this->_filesLoaded) && ($code = @file_get_contents($file)))
			{
				array_push($this->_filesLoaded, $file);
				if(substr($code, -1) !== ';')
				{
					$code .= ';';
				}
				if($this->_config['compress_code'])
				{
					$code = $this->compressCode($code);
				}
				$fullCode .= $code;
				unset($code);
			}
		}
		return $fullCode;
	} // end _getCode();

	/**
	 * Check cache modify time.
	**/
	private function checkModifiedFiles()
	{
		$cacheLife = @filemtime($this->_config['cache_directory'].$this->_getCacheName());
		foreach($this->_filesRequire as $id => $file)
		{
			if(file_exists($file))
			{
				$fileLife = @filemtime($file);
				if($fileLife > $cacheLife)
				{
					@unlink($this->_config['cache_directory'].$this->_getCacheName());
				}
			}
		}
	} // end checkModifiedFiles();

	/**
	 * Creates cache file name.
	 *
	 * reutrn string Cache file name.
	**/
	private function _getCacheName()
	{
		if($this->_filename == null)
		{
			if($this->_config['gzip_contents'])
			{
				$this->_filename = md5(serialize($this->_config).implode('', $this->_filesRequire)).'.php';
			}
			else
			{
				$this->_filename = md5(serialize($this->_config).implode('', $this->_filesRequire)).'.js';
			}
		}
		return $this->_filename;
	} // end _getCacheName();

	/**
	 * Return saved code file address.
	 *
	 * @return string Minified JS files address/es.
	**/
	public function minifyCode()
	{
		$this->checkModifiedFiles();
		if(!($this->_jsCode = @file_get_contents($this->_config['cache_directory'].$this->_getCacheName())))
		{
			$this->_jsCode = $this->_getCode($this->_filesRequire);
			$this->_jsCode .= "\n// generated by JavaScript Minify (http://blog.kamilbrenk.pl/js-minify/)";
			file_put_contents($this->_config['cache_directory'].$this->_getCacheName(), ($this->_config['gzip_contents']?$this->gzip():$this->_jsCode));
			unset($cssCode);
		}
		return $this->_config['cache_directory'].$this->_getCacheName();
	} // end showCode();

	protected function gzip()
	{
		$return = '<?php header(\'Content-Type: text/css; charset='.$this->_config['charset'].'\');';
		if($this->_config['use_cache_browser'])
		{
			$return .= 'header(\'Last-Modified: '.gmdate('D, d M Y H:i:s', @filemtime($this->_config['cache_directory'].$this->_getCacheName())).' GMT\');
			header(\'Cache-Control: public, must-revalidate, max-age='.$this->_config['time_cache_browser'].'\');
			header(\'Expires: '.gmdate('D, d M Y H:i:s', time() + $this->_config['time_cache_browser']).' GMT\');';
		}
		else
		{
			$return .= 'header(\'Cache-Control: no-cache, must-revalidate\');
			header(\'Expires: Sat, 26 Jul 1997 05:00:00 GMT\');';
		}
		if(extension_loaded("zlib") && !ini_get('zlib.output_compression'))
		{
			$return .= 'header(\'Content-Encoding: gzip\');';
		}
		$return .= 'header(\'Content-Length: '.strlen($this->_jsCode).'\');';
		$return .= 'echo gzencode(\''.$this->_jsCode.'\', '.$this->_config['gzip_level'].');';
		return $return;
	} // end gzip();
}